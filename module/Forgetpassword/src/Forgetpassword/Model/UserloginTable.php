<?php
namespace Forgetpassword\Model;
use Zend\Db\TableGateway\TableGateway;
use Signin\Model\UserloginModel;
use Zend\Db\Sql\Select;

class UserloginTable {
	
	protected $tableGateway;

    public function __construct(TableGateway $tableGateway)
	 {
		 $this->tableGateway = $tableGateway;
		 }
		
		 public function fetchAll()
		 {
			 $resultSet = $this->tableGateway->select();
			 return $resultSet;
			 }
			
			 public function getUser($id)
			 {
				 $user_id = (int) $id;
				 $rowset = $this->tableGateway->select(array('user_id' => $id));
				 $row = $rowset->current();
				 return $row;	
			 }
			 
			 public function getUserIdbyEmail(UserloginModel $userreg)
			 {
			 	$rowset = $this->tableGateway->select(array('user_email' => $userreg->user_email));
			 	$row = $rowset->current();
			 	if(!$row)
			 		return 0;
			 	else 
			 	    return $row->user_id;
			 	
			 }
			 
			 
			 public function savenewuser(UserloginModel $userreg)
			 {
			 	
			 	$password= $userreg->password;
			 	$salt = substr($password,-3);
			 	$pass = crypt($password).':'.crypt($salt);
		       
			 	$data = array (
			 		'user_email' =>$userreg->user_email,
			 		'password' =>$pass,
			 		'status'   =>'Y',	
			 		'inserted' =>date("Y-m-d h:i:s"),	
			 	);
			 	$this->tableGateway->insert($data);
			 }
			 
			 public function signinUser(UserloginModel $signin)
			  {
			  	//user enter the password.
			 	$password= $signin->password;
			 	/* To generate the salt, first generate enough random bytes. Because
			 	 * base64 returns one character for each 6 bits, the we should generate
			 	* at least 22*6/8=16.5 bytes, so we generate 22. Then we get the first
			 	* 22 base64 characters
			 	* 
			 	* those are generated by the combination of password + substring of password and inserted value. 
			 	*/
			  	$passnew= $password.substr($password,-3).$signin->inserted;
			 	$salt = substr(str_replace('+', '.', base64_encode(sha1($passnew))), 0, 22); // the salt we are generating are further encrypted by sh1 algorithm.
			 	$newsalt= crypt($salt); //for more security crypt the salt.
			 	// 2y is the bcrypt algorithm selector.
			 	// 15 is the workload factor. 
             	$hash = crypt($password, '$2y$15$' . $salt);
             	
             	//retrive the username and password from the table.
			 	$select= new Select(); 
			 	$select->from('user_login');
			 	$select->join('user_role','user_login.user_id=user_role.user_id',array('role_value'),'left');
			 	$select->where(array('user_login.user_email' => $signin->user_email));
			 	$rowset = $this->tableGateway->selectWith($select);
			 	$row = $rowset->current(); 
			 	if(!$row) // if useremail is not found in the  table return 0.
			 		return 0;
			 	else
			 	{
			 	   if($hash == crypt($password, $row->password)) // if email match with the row in the table match the password with the hash generated. 
			 		return $row;  // return the user id after valid user name and password.
                   else 
                   	return 0;
			 	}
			 	
			 	
			 }
			 

	
}